"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
require("rxjs/Rx");
var ItemService = (function () {
    function ItemService(http) {
        this.http = http;
        this.searchResultx = new core_1.EventEmitter();
        this.items = new Array({ id: 1, name: "Ter Stegen", role: "Goalkeeper" }, { id: 3, name: "Piqué", role: "Defender" }, { id: 4, name: "I. Rakitic", role: "Midfielder" }, { id: 5, name: "Sergio", role: "Midfielder" }, { id: 6, name: "Denis Suárez", role: "Midfielder" }, { id: 7, name: "Arda", role: "Midfielder" }, { id: 8, name: "A. Iniesta", role: "Midfielder" }, { id: 9, name: "Suárez", role: "Forward" }, { id: 10, name: "Messi", role: "Forward" }, { id: 11, name: "Neymar", role: "Forward" }, { id: 12, name: "Rafinha", role: "Midfielder" }, { id: 13, name: "Cillessen", role: "Goalkeeper" }, { id: 14, name: "Mascherano", role: "Defender" }, { id: 17, name: "Paco Alcácer", role: "Forward" }, { id: 18, name: "Jordi Alba", role: "Defender" }, { id: 19, name: "Digne", role: "Defender" }, { id: 20, name: "Sergi Roberto", role: "Midfielder" }, { id: 21, name: "André Gomes", role: "Midfielder" }, { id: 22, name: "Aleix Vidal", role: "Midfielder" }, { id: 23, name: "Umtiti", role: "Defender" }, { id: 24, name: "Mathieu", role: "Defender" }, { id: 25, name: "Masip", role: "Goalkeeper" });
    }
    ItemService.prototype.getItems = function () {
        return this.items;
    };
    ItemService.prototype.getItem = function (id) {
        return this.items.filter(function (item) { return item.id === id; })[0];
    };
    ItemService.prototype.getSearchResult = function (value) {
        var _this = this;
        var headers = new http_1.Headers({ "X-Algolia-Application-Id": "4QKIXJO05X", "X-Algolia-API-Key": "a51cc96cfa7f7ab34d0c9d00f13d79f1" });
        var options = new http_1.RequestOptions({ headers: headers });
        var valueSent = new http_1.URLSearchParams(value);
        this.http.get("https://4QKIXJO05X-dsn.algolia.net/1/indexes/trialQuestions?query=" + valueSent, options)
            .map(function (result) { return result.json(); })
            .do(function (result) { return console.log("HALLELUAH! THE SEARCH IS RETURNED FOR : " + valueSent); })
            .subscribe(function (result) {
            var self = _this;
            var myArray = [];
            //console.log("Data came : " + JSON.stringify(result.hits));
            for (var key in result.hits) {
                if (key) {
                    myArray.push(result.hits[key]);
                }
            }
            console.log("Number of Search Results is:", myArray.length);
            self.searchResultx.emit(myArray);
        }, function (error) {
            alert("Oops! There seems to be a problem connecting to our server. Please try again in a few seconds.");
        });
    };
    ItemService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http])
    ], ItemService);
    return ItemService;
}());
exports.ItemService = ItemService;
//# sourceMappingURL=data:application/json;base64,